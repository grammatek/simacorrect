/**
 * Spelling/Grammar correction API
 *
 * This API interfaces an Yfirlestur.is compatible service
 *
 * The version of the OpenAPI document: 0.1.2
 * Contact: info@grammatek.com
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.grammatek.apis

import org.grammatek.infrastructure.*
import org.grammatek.models.CorrectRequest
import org.grammatek.models.CorrectResponse
import java.io.IOException

class UsersApi(basePath: kotlin.String = defaultBasePath) : ApiClient(basePath) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://yfirlestur.is")
        }
    }

    /**
     * Correct spelling/grammar of text
     *
     * @param correctRequest
     * @return CorrectResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun correctApiPost(correctRequest: CorrectRequest) : CorrectResponse {
        val localVarResponse = correctApiPostWithHttpInfo(correctRequest = correctRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CorrectResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Correct spelling/grammar of text
     *
     * @param correctRequest
     * @return ApiResponse<CorrectResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun correctApiPostWithHttpInfo(correctRequest: CorrectRequest) : ApiResponse<CorrectResponse?> {
        val localVariableConfig = correctApiPostRequestConfig(correctRequest = correctRequest)

        return request<CorrectRequest, CorrectResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation correctApiPost
     *
     * @param correctRequest
     * @return RequestConfig
     */
    fun correctApiPostRequestConfig(correctRequest: CorrectRequest) : RequestConfig<CorrectRequest> {
        val localVariableBody = correctRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/correct.api",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

}
