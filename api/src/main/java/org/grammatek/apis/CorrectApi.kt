/**
 * Spelling/Grammar correction API
 *
 * This API interfaces an Yfirlestur.is compatible service
 *
 * The version of the OpenAPI document: 0.1.2
 * Contact: info@grammatek.com
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.grammatek.apis

import java.io.IOException

import org.grammatek.models.CorrectRequest
import org.grammatek.models.CorrectResponse
import org.grammatek.models.Error

import kotlinx.serialization.SerialName
import kotlinx.serialization.Serializable

import org.grammatek.infrastructure.ApiClient
import org.grammatek.infrastructure.ApiResponse
import org.grammatek.infrastructure.ClientException
import org.grammatek.infrastructure.ClientError
import org.grammatek.infrastructure.ServerException
import org.grammatek.infrastructure.ServerError
import org.grammatek.infrastructure.MultiValueMap
import org.grammatek.infrastructure.RequestConfig
import org.grammatek.infrastructure.RequestMethod
import org.grammatek.infrastructure.ResponseType
import org.grammatek.infrastructure.Success
import org.grammatek.infrastructure.toMultiValue

class CorrectApi(basePath: kotlin.String) : ApiClient(basePath) {

    /**
    * 
    * Correct spelling/grammar of text
    * @param correctRequest  
    * @return CorrectResponse
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun correctApiPost(correctRequest: CorrectRequest) : CorrectResponse {
        val localVarResponse = correctApiPostWithHttpInfo(correctRequest = correctRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CorrectResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * 
    * Correct spelling/grammar of text
    * @param correctRequest  
    * @return ApiResponse<CorrectResponse?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun correctApiPostWithHttpInfo(correctRequest: CorrectRequest) : ApiResponse<CorrectResponse?> {
        val localVariableConfig = correctApiPostRequestConfig(correctRequest = correctRequest)

        return request<CorrectRequest, CorrectResponse>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation correctApiPost
    *
    * @param correctRequest  
    * @return RequestConfig
    */
    fun correctApiPostRequestConfig(correctRequest: CorrectRequest) : RequestConfig<CorrectRequest> {
        val localVariableBody = correctRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/correct.api",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

}
